diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..a3f0702 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,6 +2,12 @@ if BLOCK
 
 menu "IO Schedulers"
 
+config IOSCHED_SSTF
+	bool
+	default y
+	---help---
+	  This is the IO scheduler written for CS444 by team 10-03.
+ 
 config IOSCHED_NOOP
 	bool
 	default y
@@ -55,6 +61,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_SSTF
+		bool "sstf"
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +71,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 20645e8..4b323fe 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100755
index 0000000..7d0e0ab
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,144 @@
+/*
+ * LOOK I/O scheduler for OSU CS444 Spring 2017
+ * Written by Levi Willmeth, Behnam Saeedi, and Zhaoheng Wang
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next) {
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force) {
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		printk("[KERNEL DEBUG] Dispatching request at %lu\n", (unsigned long)blk_rq_pos(rq));
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+	/* checking if the queue is not empty */
+	if(!list_empty(&nd->queue)) {
+		/* Creatinga n itterator */
+		struct request * it;
+		/* create the distance indecies */
+		/* Itterate: */
+		list_for_each_entry(it, &nd->queue,queuelist) {
+			sector_t new_sector = blk_rq_pos(rq);
+			sector_t current_sector = blk_rq_pos(it);
+			if (((unsigned long)new_sector - (unsigned long)current_sector) <= 0)
+			{
+				list_add_tail(&rq->queuelist, &it->queuelist);
+				//printk(KERN_DEBUG "[KERNEL DEBUG] Current is: %i, New is: %i.\n",current_sector,new_sector);
+				return;
+			} else {
+				//printk(KERN_DEBUG "[KERNEL DEBUG] GOOF! %i, %i.\n",new_sector,current_sector);
+			}
+		}
+	}
+	//printk(KERN_DEBUG "[KERNEL DEBUG] Queue was empty, starting new queue.\n");
+	list_add(&rq->queuelist, &nd->queue);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		    = sstf_init_queue,
+		.elevator_exit_fn		    = sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Group 10-03");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Look - No-op IO scheduler");
+
